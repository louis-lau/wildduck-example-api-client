/**
 * WildDuck API
 * WildDuck API docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from '../api';
import { Address } from './address';
import { AddressOptionalName } from './addressOptionalName';
import { AttachmentsUpload } from './attachmentsUpload';
import { Header } from './header';
import { ReferenceWithAttachments } from './referenceWithAttachments';

export class UploadMessageRequest {
    /**
    * Is the message unseen or not
    */
    'unseen'?: boolean;
    /**
    * Is the message a draft or not
    */
    'draft'?: boolean;
    /**
    * Is the message flagged or not
    */
    'flagged'?: boolean;
    /**
    * base64 encoded message source. Alternatively, you can provide this value as POST body by using message/rfc822 MIME type. If raw message is provided then it overrides any other mail configuration
    */
    'raw'?: string;
    'from'?: Address;
    /**
    * Addresses for the To: header
    */
    'to'?: Array<AddressOptionalName>;
    /**
    * Addresses for the Cc: header
    */
    'cc'?: Array<AddressOptionalName>;
    /**
    * Addresses for the Bcc: header
    */
    'bcc'?: Array<AddressOptionalName>;
    /**
    * Message subject. If not then resolved from Reference message
    */
    'subject'?: string;
    /**
    * Plaintext message
    */
    'text'?: string;
    /**
    * HTML formatted message
    */
    'html'?: string;
    /**
    * Custom headers for the message. If reference message is set then In-Reply-To and References headers are set  automaticall y
    */
    'headers'?: Array<Header>;
    /**
    * Attachments as storage file IDs. NB! When retrieving message info then an array of objects is returned. When uploading a message then an array of IDs is used.
    */
    'files'?: Array<string>;
    /**
    * Attachments for the message
    */
    'attachments'?: Array<AttachmentsUpload>;
    /**
    * Optional metadata, must be an object or JSON formatted string
    */
    'metaData'?: object | string;
    'reference'?: ReferenceWithAttachments;
    /**
    * Session identifier for the logs
    */
    'sess'?: string;
    /**
    * IP address for the logs
    */
    'ip'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "unseen",
            "baseName": "unseen",
            "type": "boolean"
        },
        {
            "name": "draft",
            "baseName": "draft",
            "type": "boolean"
        },
        {
            "name": "flagged",
            "baseName": "flagged",
            "type": "boolean"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "string"
        },
        {
            "name": "from",
            "baseName": "from",
            "type": "Address"
        },
        {
            "name": "to",
            "baseName": "to",
            "type": "Array<AddressOptionalName>"
        },
        {
            "name": "cc",
            "baseName": "cc",
            "type": "Array<AddressOptionalName>"
        },
        {
            "name": "bcc",
            "baseName": "bcc",
            "type": "Array<AddressOptionalName>"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string"
        },
        {
            "name": "html",
            "baseName": "html",
            "type": "string"
        },
        {
            "name": "headers",
            "baseName": "headers",
            "type": "Array<Header>"
        },
        {
            "name": "files",
            "baseName": "files",
            "type": "Array<string>"
        },
        {
            "name": "attachments",
            "baseName": "attachments",
            "type": "Array<AttachmentsUpload>"
        },
        {
            "name": "metaData",
            "baseName": "metaData",
            "type": "object | string"
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "ReferenceWithAttachments"
        },
        {
            "name": "sess",
            "baseName": "sess",
            "type": "string"
        },
        {
            "name": "ip",
            "baseName": "ip",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return UploadMessageRequest.attributeTypeMap;
    }
}

